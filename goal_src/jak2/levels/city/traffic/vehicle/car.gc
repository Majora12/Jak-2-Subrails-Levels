;;-*-Lisp-*-
(in-package goal)

;; name: car.gc
;; name in dgo: car
;; dgos: CWI

;; DECOMP BEGINS
;; For Custom Level begin 
(deftype car-stack-var0 (structure)
  ((vec    vector 3 :inline :offset 0)
   (vec1   vector 2 :inline :offset 64)
   (byte0  int8             :offset 128)
   (float0 float            :offset 132)
   (float1 float            :offset 136)
   )
  )

(deftype car-stack-var1 (structure)
  ((vec0 vector           :inline :offset 0)
   (mat  matrix           :inline :offset 16)
   (glow sprite-glow-data :inline :offset 80)
   )
  )
   (deftype pre-car (process-drawable)
  ()
  )

  (defun car-find-mesh-dir ((arg0 vector) (arg1 vector) (arg2 collide-tri-result))
  (local-vars (a0-8 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s4-0 (new 'stack-no-clear 'car-stack-var0)))
      (vector-! (the-as vector (-> s4-0 vec)) (-> arg2 vertex 2) (-> arg2 vertex 1))
      (vector-! (-> s4-0 vec 1) (the-as vector (-> arg2 vertex)) (-> arg2 vertex 2))
      (vector-! (-> s4-0 vec 2) (-> arg2 vertex 1) (the-as vector (-> arg2 vertex)))
      (set! (-> s4-0 byte0) -1)
      (set! (-> s4-0 float1) -1.0)
      (dotimes (v1-5 3)
        (.lvf vf1 (&-> (-> s4-0 vec v1-5) quad))
        (.add.w.vf vf2 vf0 vf0 :mask #b1)
        (.mul.vf vf1 vf1 vf1)
        (.mul.x.vf acc vf2 vf1 :mask #b1)
        (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
        (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
        (.mov a0-8 vf1)
        (set! (-> s4-0 float0) a0-8)
        (when (< (-> s4-0 float1) (-> s4-0 float0))
          (set! (-> s4-0 float1) (-> s4-0 float0))
          (set! (-> s4-0 byte0) v1-5)
          )
        )
      (if (< (-> s4-0 byte0) 2)
          (set! (-> s4-0 vec (-> s4-0 byte0) quad) (-> s4-0 vec 2 quad))
          )
      (dotimes (s3-0 2)
        (let ((s2-0 (-> s4-0 vec1 s3-0)))
          (vector-normalize-copy! s2-0 (-> s4-0 vec s3-0) 1.0)
          (let ((f0-5 (vector-dot s2-0 arg1)))
            (when (< f0-5 0.0)
              (vector-float*! s2-0 s2-0 -1.0)
              (set! f0-5 (* -1.0 f0-5))
              )
            (if (>= f0-5 0.866)
                (set! (-> arg0 quad) (-> s2-0 quad))
                )
            )
          )
        )
      )
    0
    0
    (none)
    )
  )

 
;; For Custom Level end

(defskelgroup skel-cara cara cara-lod0-jg cara-idle-ja
              ((cara-lod0-mg (meters 20)) (cara-lod1-mg (meters 40)) (cara-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5.2)
              :shadow cara-shadow-mg
              )

(defskelgroup skel-carb carb carb-lod0-jg carb-idle-ja
              ((carb-lod0-mg (meters 20)) (carb-lod1-mg (meters 40)) (carb-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5)
              :shadow carb-shadow-mg
              )

(defskelgroup skel-carc carc carc-lod0-jg carc-idle-ja
              ((carc-lod0-mg (meters 20)) (carc-lod1-mg (meters 40)) (carc-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 5.3)
              :shadow carc-shadow-mg
              )

(defskelgroup skel-hellcat hellcat hellcat-lod0-jg hellcat-idle-ja
              ((hellcat-lod0-mg (meters 20)) (hellcat-lod1-mg (meters 40)) (hellcat-lod2-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 6.8)
              :shadow hellcat-shadow-mg
              :origin-joint-index 3
              )

(define *car-explosion-info*
  (new 'static 'vehicle-explosion-info
    :joints (new 'static 'boxed-array :type joint-exploder-static-joint-params
      (new 'static 'joint-exploder-static-joint-params :joint-index 3 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 4 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 5 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 6 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 7 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 8 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 9 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 10 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 11 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 12 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 13 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 14 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 15 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 16 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 17 :parent-joint-index -1)
      (new 'static 'joint-exploder-static-joint-params :joint-index 18 :parent-joint-index -1)
      )
    :collide-spec #x1
    :art-level 'ctywide
    :skel #f
    :skel-name "skel-vehicle-explosion"
    :anim 2
    )
  )

(define *cara-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 8.0
      :inv-mass 0.125
      :linear-damping 0.995
      :angular-damping 0.995
      :bounce-factor 0.1
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 5) (meters 2) (meters 10))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 72)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*cara-constants*
    :flags #x68
    :object-type #xe
    :guard-type #x7
    :max-engine-thrust (meters 50)
    :inv-max-engine-thrust 0.0000048828124
    :engine-response-rate 20.0
    :engine-intake-factor 1.0
    :brake-factor 2.25
    :turbo-boost-factor 1.0
    :max-xz-speed (meters 400)
    :ground-probe-distance (meters 3)
    :cos-ground-effect-angle 0.42261827
    :spring-lift-factor 2.0
    :air-drag-factor 1.0
    :steering-thruster-factor 20.0
    :steering-thruster-max-gain 20.0
    :steering-thruster-half-gain-speed (meters 100)
    :tire-friction-factor 0.6
    :tire-static-friction 0.55
    :tire-dynamic-friction 0.25
    :tire-dynamic-friction-speed (meters 3)
    :tire-inv-max-friction-speed 0.000024414063
    :airfoil-factor 1.0
    :drag-force-factor 0.7
    :speed-scrubbing-drag 10.0
    :speed-limiting-drag 0.7
    :pitch-control-factor 0.5
    :roll-control-factor 1.0
    :jump-thrust-factor 0.5
    :buoyancy-factor 1.0
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 1)
    :target-speed-offset (meters 3)
    :turning-accel (meters 20)
    :toughness-factor 2.0
    :damage-factor 2.5
    :camera-string-min-height (meters 4.5)
    :camera-string-max-height (meters 4.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 12.5)
    :camera-min-fov 15109.688
    :camera-max-fov 17476.268
    :camera-head-offset 8192.0
    :camera-foot-offset 4096.0
    :camera-normal-max-angle-offset 5461.3335
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 3
    :section-count 4
    :rider-stance #x1
    :grab-rail-count 6
    :grab-rail-array (new 'static 'inline-array vehicle-grab-rail-info 6
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 4505.6 :y -2662.4 :z 15360.0 :w 1.0)
          (new 'static 'vector :x -4505.6 :y -2662.4 :z 15360.0 :w 1.0)
          )
        :normal (new 'static 'vector :z 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 7372.8 :y -819.2 :z -4096.0 :w 1.0)
          (new 'static 'vector :x 7372.8 :y -819.2 :z 4096.0 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -7372.8 :y -819.2 :z 4096.0 :w 1.0)
          (new 'static 'vector :x -7372.8 :y -819.2 :z -4096.0 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -3686.4 :y -409.6 :z -14950.4 :w 1.0)
          (new 'static 'vector :x 3686.4 :y -409.6 :z -14950.4 :w 1.0)
          )
        :normal (new 'static 'vector :z -1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 3837.952 :y -409.6 :z -14950.4 :w 1.0)
          (new 'static 'vector :x 6041.6 :y -614.4 :z -9011.2 :w 1.0)
          )
        :normal (new 'static 'vector :x 0.707 :z -0.707 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -6041.6 :y -614.4 :z -9011.2 :w 1.0)
          (new 'static 'vector :x -3837.952 :y -409.6 :z -14950.4 :w 1.0)
          )
        :normal (new 'static 'vector :x -0.707 :z -0.707 :w 1.0)
        )
      )
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :x 4079.616 :y 819.2 :z -311.296 :w (the-as float #x30000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :x -4079.616 :y 819.2 :z -311.296 :w (the-as float #x30000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 3751.936 :z -10563.584 :w (the-as float #x40000))
        )
      (new 'static 'vehicle-seat-info)
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 614.4 :y 614.4 :z 1433.6 :w 1.0)
      (new 'static 'vector :x 614.4 :y 614.4 :z -1433.6 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x200 #x20 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x400 #x40 #x4)
      :damage-seg-count 3
      )
    :section-car-front-right (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x800 #x80 #x8)
      :damage-seg-count 3
      )
    :section-car-rear-right (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x1000 #x100 #x10)
      :damage-seg-count 3
      )
    :explosion #f
    :engine-pitch-scale 0.09
    :engine-pitch-mod-amp 0.01
    :engine-sound-select 5
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "car-scrape-stn")
    :glance-sound (static-sound-name "car-glance-stn")
    :impact-sound (static-sound-name "car-impact-stn")
    :extra-sound (static-sound-name "car-by-5")
    :explosion-part #xa1
    :headlight-count 2
    :taillight-count 2
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 3072.0 :z -14336.0 :w 1.0)
      (new 'static 'vector :x -3072.0 :z -14336.0 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 6963.2 :y -1024.0 :z -7372.8 :w 1.0)
      (new 'static 'vector :x -6963.2 :y -1024.0 :z -7372.8 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 3072.0 :z -13926.4 :w 1.0)
      (new 'static 'vector :x -3072.0 :z -13926.4 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2
      (new 'static 'vector :x 12288.0 :w 1.0)
      (new 'static 'vector :x -12288.0 :w 1.0)
      )
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :x 4915.2 :z 15564.8 :w 1.0)
      (new 'static 'vector :x -4915.2 :z 15564.8 :w 1.0)
      (new 'static 'vector)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 3276.8 :y 3276.8 :z -14131.2 :w 1.0)
      (new 'static 'vector :x -3276.8 :y 3276.8 :z -14131.2 :w 1.0)
      )
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 819.2 :z 8192.0 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 819.2 :z -8192.0 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 7782.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -7782.4 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -8192.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 8192.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.5)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 2.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -8192.0 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :z -5734.4 :w 1.0)
    :brake-local-pos (new 'static 'vector :z -8192.0 :w 1.0)
    :color-option-count 3
    :color-option-array (new 'static 'inline-array vector 3
      (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 0.7 :w 1.0)
      )
    )
  )

(define *carb-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 8.0 ;; custom level 
      :inv-mass 0.125 ;; custom level
      :linear-damping 1.0 ;; custom level
      :angular-damping 1.0 ;; custom level
      :bounce-factor 0.1 ;; custom level
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 5) (meters 2) (meters 10)) ;; custom level
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 72) ;; custom level
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*carb-constants*
    :flags #x68
    :object-type #xf
    :guard-type #x7
    :max-engine-thrust (meters 100) ;; custom level
    :inv-max-engine-thrust 0.0000048828124 ;; custom level
    :engine-response-rate 20.0 ;; custom level
    :engine-intake-factor 1.0
    :brake-factor 1.0 ;; custom level
    :turbo-boost-factor 1.0
    :max-xz-speed (meters 400) ;; custom level
    :ground-probe-distance (meters 4.5)
    :cos-ground-effect-angle 0.42261827 ;; custom level
    :spring-lift-factor 2.0 ;; custom level
    :air-drag-factor 1.0
    :steering-thruster-factor 15.0 ;; custom level
    :steering-thruster-max-gain 15.5 ;; custom level
    :steering-thruster-half-gain-speed (meters 30) ;; custom level
    :tire-steering-angle 1274.3112 ;; custom level
    :tire-friction-factor 0.5 ;; custom level
    :tire-static-friction 0.5 ;; custom level
    :tire-dynamic-friction 0.25 ;; custom level
    :tire-dynamic-friction-speed (meters 1) ;; custom level
    :tire-inv-max-friction-speed 0.000024414063 ;; custom level
    :airfoil-factor 0.0 ;; custom level
    :drag-force-factor 0.7 ;; custom level
    :speed-scrubbing-drag 10.0
    :speed-limiting-drag 0.0 ;; custom level
    :pitch-control-factor 0.5
    :roll-control-factor 1.0
    :jump-thrust-factor 0.5
    :buoyancy-factor 1.0
    :player-weight 0.0 ;; custom level
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 1)
    :target-speed-offset (meters 3)
    :turning-accel (meters 20)
    :toughness-factor 3.0 ;; custom level
    :damage-factor 2.5
    :camera-string-min-height (meters 4.5)
    :camera-string-max-height (meters 4.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 12.5)
    :camera-min-fov 15109.688
    :camera-max-fov 17476.268
    :camera-head-offset 8192.0
    :camera-foot-offset 4096.0
    :camera-normal-max-angle-offset 5461.3335
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 3
    :section-count 4
    :rider-stance #x1
    :grab-rail-count 5
    :grab-rail-array (new 'static 'inline-array vehicle-grab-rail-info 5
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 6963.2 :y -2048.0 :z -3276.8 :w 1.0)
          (new 'static 'vector :x 6963.2 :y -2048.0 :z 1638.4 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -6963.2 :y -2048.0 :z 1638.4 :w 1.0)
          (new 'static 'vector :x -6963.2 :y -2048.0 :z -3276.8 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 4096.0 :y -1638.4 :z 16384.0 :w 1.0)
          (new 'static 'vector :x 3891.2 :y -1638.4 :z 16384.0 :w 1.0)
          )
        :normal (new 'static 'vector :z 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -3891.2 :y -1638.4 :z 16384.0 :w 1.0)
          (new 'static 'vector :x -4096.0 :y -1638.4 :z 16384.0 :w 1.0)
          )
        :normal (new 'static 'vector :z 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -819.2 :y 1024.0 :z -12697.6 :w 1.0)
          (new 'static 'vector :x 819.2 :y 1024.0 :z -12697.6 :w 1.0)
          )
        :normal (new 'static 'vector :z -1.0 :w 1.0)
        )
      )
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :x 4218.88 :y 999.424 :z -172.032 :w (the-as float #x30000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :x -3891.2 :y 999.424 :z -172.032 :w (the-as float #x30000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 3751.936 :z -8192.0 :w (the-as float #x40000))
        )
      (new 'static 'vehicle-seat-info)
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 122.88 :y -1433.6 :z 614.4 :w 1.0)
      (new 'static 'vector :x 122.88 :y 1433.6 :z 614.4 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x200 #x20 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x400 #x40 #x4)
      :damage-seg-count 3
      )
    :section-car-front-right (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x800 #x80 #x8)
      :damage-seg-count 3
      )
    :section-car-rear-right (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x1000 #x100 #x10)
      :damage-seg-count 3
      )
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-mod-amp 0.025
    :engine-sound-select 6
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "car-scrape-stn")
    :glance-sound (static-sound-name "car-glance-stn")
    :impact-sound (static-sound-name "car-impact-stn")
    :extra-sound (static-sound-name "car-by-6")
    :explosion-part #xa1
    :headlight-count 2
    :taillight-count 2
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 4096.0 :y 1638.4 :z -13107.2 :w 1.0)
      (new 'static 'vector :x -4096.0 :y 1638.4 :z -13107.2 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 6553.6 :y 3072.0 :z -10240.0 :w 1.0)
      (new 'static 'vector :x -6553.6 :y 3072.0 :z -10240.0 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 4096.0 :y 1638.4 :z -10240.0 :w 1.0)
      (new 'static 'vector :x -4096.0 :y 1638.4 :z -10240.0 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2
      (new 'static 'vector :x 12288.0 :w 1.0)
      (new 'static 'vector :x -12288.0 :w 1.0)
      )
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :x 4096.0 :y 2457.6 :z 15155.2 :w 1.0)
      (new 'static 'vector :x -4096.0 :y 2457.6 :z 15155.2 :w 1.0)
      (new 'static 'vector)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 3891.2 :y 4096.0 :z -12697.6 :w 1.0)
      (new 'static 'vector :x -3891.2 :y 4096.0 :z -12697.6 :w 1.0)
      )
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 819.2 :z 9011.2 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 819.2 :z -9011.2 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 7782.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -7782.4 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -8192.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 8192.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.5)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 2.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -8192.0 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :z -5734.4 :w 1.0)
    :brake-local-pos (new 'static 'vector :z -8192.0 :w 1.0)
    :color-option-count 4
    :color-option-array (new 'static 'inline-array vector 4
      (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 1.0 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.7 :z 0.7 :w 1.0)
      (new 'static 'vector :x 0.6 :y 1.0 :z 0.8 :w 1.0)
      )
    )
  )

(define *carc-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 9.0
      :inv-mass 0.11111111
      :linear-damping 0.995
      :angular-damping 0.995
      :bounce-factor 0.4
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :z -4096.0 :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 3) (meters 4) (meters 6))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*carc-constants*
    :flags #x68
    :object-type #x10
    :guard-type #x7
    :max-engine-thrust (meters 35)
    :inv-max-engine-thrust 0.0000069754465
    :engine-response-rate 10.0
    :engine-intake-factor 1.0
    :brake-factor 2.25
    :turbo-boost-factor 1.0
    :max-xz-speed (meters 40)
    :ground-probe-distance (meters 4.5)
    :cos-ground-effect-angle 0.42261824
    :spring-lift-factor 0.4
    :air-drag-factor 1.0
    :steering-thruster-factor 3.0
    :steering-thruster-max-gain 3.0
    :steering-thruster-half-gain-speed (meters 15)
    :tire-friction-factor 0.75
    :tire-static-friction 0.55
    :tire-dynamic-friction 0.4
    :tire-dynamic-friction-speed (meters 2)
    :tire-inv-max-friction-speed 0.000024414063
    :airfoil-factor 1.0
    :drag-force-factor 1.0
    :speed-scrubbing-drag 10.0
    :speed-limiting-drag 0.7
    :pitch-control-factor 0.5
    :roll-control-factor 1.0
    :jump-thrust-factor 0.5
    :buoyancy-factor 1.0
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 1)
    :target-speed-offset (meters -2)
    :turning-accel (meters 15)
    :toughness-factor 1.0
    :damage-factor 2.5
    :camera-string-min-height (meters 4.5)
    :camera-string-max-height (meters 4.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 12.5)
    :camera-min-fov 15109.688
    :camera-max-fov 17476.268
    :camera-head-offset 8192.0
    :camera-foot-offset 4096.0
    :camera-normal-max-angle-offset 5461.3335
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 4
    :section-count 4
    :rider-stance #x1
    :grab-rail-count 9
    :grab-rail-array (new 'static 'inline-array vehicle-grab-rail-info 9
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 5324.8 :y -819.2 :z -4096.0 :w 1.0)
          (new 'static 'vector :x 5324.8 :y -819.2 :z 2048.0 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -5324.8 :y -819.2 :z 2048.0 :w 1.0)
          (new 'static 'vector :x -5324.8 :y -819.2 :z -4096.0 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 3276.8 :y -204.8 :z 9830.4 :w 1.0)
          (new 'static 'vector :y -204.8 :z 10547.2 :w 1.0)
          )
        :normal (new 'static 'vector :z 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :y -204.8 :z 10547.2 :w 1.0)
          (new 'static 'vector :x -3276.8 :y -204.8 :z 9830.4 :w 1.0)
          )
        :normal (new 'static 'vector :z 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -204.8 :y 3276.8 :z -20889.6 :w 1.0)
          (new 'static 'vector :x 204.8 :y 3276.8 :z -20889.6 :w 1.0)
          )
        :normal (new 'static 'vector :z -1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 3072.0 :y 3481.6 :z -19660.8 :w 1.0)
          (new 'static 'vector :x 3891.2 :y 3481.6 :z -16793.6 :w 1.0)
          )
        :normal (new 'static 'vector :x 0.707 :z -0.707 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -3891.2 :y 3481.6 :z -16793.6 :w 1.0)
          (new 'static 'vector :x -3072.0 :y 3481.6 :z -19660.8 :w 1.0)
          )
        :normal (new 'static 'vector :x -0.707 :z -0.707 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 4915.2 :z -14745.6 :w 1.0)
          (new 'static 'vector :x 4915.2 :z -12697.6 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -4915.2 :z -12697.6 :w 1.0)
          (new 'static 'vector :x -4915.2 :z -14745.6 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 761.856 :z 1368.064 :w (the-as float #x10000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :x -2867.2 :y 1638.4 :z -2867.2 :w (the-as float #x20000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :x 2867.2 :y 1638.4 :z -2867.2 :w (the-as float #x20000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 4239.36 :z -14192.64 :w (the-as float #x40000))
        )
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 696.32 :y -1433.6 :z 614.4 :w 1.0)
      (new 'static 'vector :x 696.32 :y 1433.6 :z 614.4 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x200 #x20 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x400 #x40 #x4)
      :damage-seg-count 3
      )
    :section-car-front-right (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x800 #x80 #x8)
      :damage-seg-count 3
      )
    :section-car-rear-right (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x1000 #x100 #x10)
      :damage-seg-count 3
      )
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-mod-amp 0.025
    :engine-sound-select 7
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "car-scrape-stn")
    :glance-sound (static-sound-name "car-glance-stn")
    :impact-sound (static-sound-name "car-impact-stn")
    :extra-sound (static-sound-name "car-by-7")
    :explosion-part #xa1
    :headlight-count 1
    :taillight-count 2
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 3891.2 :z -15155.2 :w 1.0)
      (new 'static 'vector :x -3891.2 :z -15155.2 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2457.6 :y 3481.6 :z -20480.0 :w 1.0)
      (new 'static 'vector :x -2457.6 :y 3481.6 :z -20480.0 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2
      (new 'static 'vector :x -0.4 :z -0.92 :w 1.0)
      (new 'static 'vector :x 0.4 :z -0.92 :w 1.0)
      )
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 4096.0 :y 2048.0 :z -14336.0 :w 1.0)
      (new 'static 'vector :x -4096.0 :y 2048.0 :z -14336.0 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2
      (new 'static 'vector :x 12288.0 :w 1.0)
      (new 'static 'vector :x -12288.0 :w 1.0)
      )
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :y 409.6 :z 8601.6 :w 1.0)
      (new 'static 'vector)
      (new 'static 'vector)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2867.2 :y 2048.0 :z -18022.4 :w 1.0)
      (new 'static 'vector :x -2867.2 :y 2048.0 :z -18022.4 :w 1.0)
      )
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 4915.2 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -13107.2 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 819.2 :z -4096.0 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 819.2 :z -4096.0 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 3686.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -11878.4 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -12288.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z 4096.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.5)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -4096.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 2.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :z -12288.0 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :z -9830.4 :w 1.0)
    :brake-local-pos (new 'static 'vector :z -12288.0 :w 1.0)
    :color-option-count 4
    :color-option-array (new 'static 'inline-array vector 4
      (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0)
      (new 'static 'vector :x 0.6 :y 1.2 :z 1.2 :w 1.0)
      (new 'static 'vector :x 0.7 :y 1.25 :z 0.8 :w 1.0)
      (new 'static 'vector :x 1.0 :y 0.6 :z 1.5 :w 1.0)
      )
    )
  )

(define *hellcat-constants*
  (new 'static 'rigid-body-vehicle-constants
    :info (new 'static 'rigid-body-info
      :mass 20.0
      :inv-mass 0.05
      :linear-damping 0.995
      :angular-damping 0.995
      :bounce-factor 0.4
      :friction-factor 0.05
      :bounce-mult-factor 1.22
      :cm-offset-joint (new 'static 'vector :y 2048.0 :z -2048.0 :w 1.0)
      :inertial-tensor-box (new 'static 'array meters 3 (meters 6) (meters 3) (meters 7))
      )
    :extra (new 'static 'rigid-body-object-extra-info
      :max-time-step 0.033333335
      :gravity (meters 40)
      :idle-distance (meters 50)
      :attack-force-scale 1.0
      )
    :name '*hellcat-constants*
    :flags #x4c
    :object-type #x13
    :guard-type #x5
    :max-engine-thrust (meters 30)
    :inv-max-engine-thrust 0.000008138021
    :engine-response-rate 8.0
    :engine-intake-factor 1.0
    :brake-factor 2.25
    :turbo-boost-factor 1.0
    :max-xz-speed (meters 30)
    :ground-probe-distance (meters 4.5)
    :cos-ground-effect-angle 0.42261824
    :spring-lift-factor 0.3
    :air-drag-factor 1.0
    :steering-thruster-factor 3.0
    :steering-thruster-max-gain 2.0
    :steering-thruster-half-gain-speed (meters 15)
    :tire-friction-factor 0.5
    :tire-static-friction 0.55
    :tire-dynamic-friction 0.4
    :tire-dynamic-friction-speed (meters 2)
    :tire-inv-max-friction-speed 0.000034877234
    :airfoil-factor 1.0
    :drag-force-factor 1.0
    :speed-scrubbing-drag 10.0
    :speed-limiting-drag 0.5
    :pitch-control-factor 0.5
    :roll-control-factor 1.0
    :jump-thrust-factor 0.5
    :buoyancy-factor 1.0
    :player-weight 163840.0
    :player-shift-x (meters 0.6)
    :player-shift-z (meters 1)
    :target-speed-offset (meters -2)
    :turning-accel (meters 12)
    :toughness-factor 4.0
    :damage-factor 2.0
    :camera-string-min-height (meters 4.5)
    :camera-string-max-height (meters 4.5)
    :camera-string-min-length (meters 5)
    :camera-string-max-length (meters 12.5)
    :camera-min-fov 15109.688
    :camera-max-fov 17476.268
    :camera-head-offset 8192.0
    :camera-foot-offset 4096.0
    :camera-air-max-angle-offset 5461.3335
    :camera-max-lookaround-speed 40960.0
    :seat-count 3
    :section-count 4
    :rider-stance #x1
    :grab-rail-count 6
    :grab-rail-array (new 'static 'inline-array vehicle-grab-rail-info 6
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 3686.4 :y 409.6 :z 24576.0 :w 1.0)
          (new 'static 'vector :x 3276.8 :y 409.6 :z 25395.2 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -3276.8 :y 409.6 :z 25395.2 :w 1.0)
          (new 'static 'vector :x -3686.4 :y 409.6 :z 24576.0 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x 8601.6 :z -409.6 :w 1.0)
          (new 'static 'vector :x 8601.6 :y -409.6 :z 2867.2 :w 1.0)
          )
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -8601.6 :y -409.6 :z 2867.2 :w 1.0)
          (new 'static 'vector :x -8601.6 :z -409.6 :w 1.0)
          )
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :y -409.6 :z -15974.4 :w 1.0)
          (new 'static 'vector :x 10240.0 :y -409.6 :z -13926.4 :w 1.0)
          )
        :normal (new 'static 'vector :z -1.0 :w 1.0)
        )
      (new 'static 'vehicle-grab-rail-info
        :local-pos (new 'static 'inline-array vector 2
          (new 'static 'vector :x -10240.0 :y -409.6 :z -13926.4 :w 1.0)
          (new 'static 'vector :y -409.6 :z -15974.4 :w 1.0)
          )
        :normal (new 'static 'vector :z -1.0 :w 1.0)
        )
      )
    :seat-array (new 'static 'inline-array vehicle-seat-info 4
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :x 5120.0 :y 819.2 :z 2457.6 :w (the-as float #x10000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :x -5120.0 :y 819.2 :z 2457.6 :w (the-as float #x20000))
        )
      (new 'static 'vehicle-seat-info
        :position (new 'static 'vector :y 3686.4 :z -8192.0 :w (the-as float #x40000))
        )
      (new 'static 'vehicle-seat-info)
      )
    :rider-hand-offset (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2457.6 :y 409.6 :z 4710.4 :w 1.0)
      (new 'static 'vector :x -2457.6 :y 409.6 :z 4710.4 :w 1.0)
      )
    :section-bike-front (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x200 #x20 #x2)
      :damage-seg-count 3
      )
    :section-bike-rear (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x400 #x40 #x4)
      :damage-seg-count 3
      )
    :section-car-front-right (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x800 #x80 #x8)
      :damage-seg-count 3
      )
    :section-car-rear-right (new 'static 'vehicle-section-info
      :damage-seg-array (new 'static 'array uint64 3 #x1000 #x100 #x10)
      :damage-seg-count 3
      )
    :explosion #f
    :engine-pitch-scale 0.25
    :engine-pitch-mod-amp 0.025
    :engine-sound-select 8
    :engine-sound (static-sound-name "vehicle-engine")
    :thrust-sound (static-sound-name "bike-thrust")
    :scrape-sound (static-sound-name "car-scrape-stn")
    :glance-sound (static-sound-name "car-glance-stn")
    :impact-sound (static-sound-name "car-impact-stn")
    :extra-sound (static-sound-name "car-by-8")
    :explosion-part #xa1
    :headlight-count 3
    :taillight-count 2
    :thruster-flame-width (meters 0.6)
    :thruster-flame-length (meters 2)
    :thruster-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 6144.0 :y 4096.0 :z -17612.8 :w 1.0)
      (new 'static 'vector :x -6144.0 :y 4096.0 :z -17612.8 :w 1.0)
      )
    :exhaust-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 6144.0 :y 5529.6 :z -17612.8 :w 1.0)
      (new 'static 'vector :x -6144.0 :y 5529.6 :z -17612.8 :w 1.0)
      )
    :exhaust-local-dir (new 'static 'inline-array vector 2 (new 'static 'vector :z -1.0 :w 1.0) (new 'static 'vector :z -1.0 :w 1.0))
    :smoke-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2048.0 :y 4096.0 :z -16384.0 :w 1.0)
      (new 'static 'vector :x -2048.0 :y 4096.0 :z -16384.0 :w 1.0)
      )
    :smoke-local-vel (new 'static 'inline-array vector 2
      (new 'static 'vector :x 2048.0 :w 1.0)
      (new 'static 'vector :x -2048.0 :w 1.0)
      )
    :headlight-local-pos (new 'static 'inline-array vector 3
      (new 'static 'vector :x 5734.4 :y 1843.2 :z 15769.6 :w 1.0)
      (new 'static 'vector :x -5734.4 :y 1843.2 :z 15769.6 :w 1.0)
      (new 'static 'vector :y 6963.2 :z 6922.24 :w 1.0)
      )
    :taillight-local-pos (new 'static 'inline-array vector 2
      (new 'static 'vector :x 10362.88 :y 4710.4 :z -16998.4 :w 1.0)
      (new 'static 'vector :x -10362.88 :y 4710.4 :z -16998.4 :w 1.0)
      )
    :lift-thruster-count 2
    :roll-thruster-count 2
    :steering-thruster-count 2
    :stabilizer-count 4
    :inv-lift-thruster-count 0.5
    :lift-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 2048.0 :z 8192.0 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 2048.0 :z -12288.0 :w 1.0)
        :normal (new 'static 'vector :y -1.0 :w 1.0)
        )
      )
    :roll-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x 6963.2 :y 2867.2 :z -2048.0 :w 1.0)
        :normal (new 'static 'vector :x 0.3 :y -0.6 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :x -6963.2 :y 2867.2 :z -2048.0 :w 1.0)
        :normal (new 'static 'vector :x -0.3 :y -0.6 :w 1.0)
        )
      )
    :steering-thruster-array (new 'static 'inline-array vehicle-control-point 2
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 2048.0 :z 5734.4 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 2048.0 :z -9830.4 :w 1.0)
        :normal (new 'static 'vector :x -1.0 :w 1.0)
        )
      )
    :stabilizer-array (new 'static 'inline-array vehicle-control-point 6
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 2048.0 :z -10240.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 2048.0 :z 6144.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 0.5)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 2048.0 :z -2048.0 :w 1.0)
        :normal (new 'static 'vector :x 1.0 :w 2.0)
        )
      (new 'static 'vehicle-control-point
        :local-pos (new 'static 'vector :y 2048.0 :z -10240.0 :w 1.0)
        :normal (new 'static 'vector :y 1.0 :w 1.0)
        )
      (new 'static 'vehicle-control-point)
      (new 'static 'vehicle-control-point)
      )
    :engine-thrust-local-pos (new 'static 'vector :y 2048.0 :z -7782.4 :w 1.0)
    :brake-local-pos (new 'static 'vector :y 2048.0 :z -10240.0 :w 1.0)
    :color-option-count 1
    :color-option-array (new 'static 'inline-array vector 1 (new 'static 'vector :x 1.0 :y 1.0 :z 1.0 :w 1.0))
    )
  )

(set! (-> *cara-constants* explosion) *car-explosion-info*)

(set! (-> *carb-constants* explosion) *car-explosion-info*)

(set! (-> *carc-constants* explosion) *car-explosion-info*)

(set! (-> *hellcat-constants* explosion) *car-explosion-info*)

(deftype car-base (vehicle)
  ((rider-hand-joint-array  int8  2)
   )
  )


(defmethod vehicle-method-117 ((this car-base) (arg0 vector) (arg1 int) (arg2 int))
  (vector-matrix*!
    arg0
    (-> this info rider-hand-offset arg2)
    (-> this node-list data (-> this rider-hand-joint-array arg1) bone transform)
    )
  0
  (none)
  )

(deftype cara (car-base)
  ((steering-wheel-l  joint-mod-rotate-local)
   (steering-wheel-r  joint-mod-rotate-local)
   (fin-fl            joint-mod-rotate-local)
   (fin-fr            joint-mod-rotate-local)
   (fin-rl            joint-mod-rotate-local)
   (fin-rr            joint-mod-rotate-local)
   (rudder-l          joint-mod-rotate-local)
   (rudder-r          joint-mod-rotate-local)
   (rudder            joint-mod-rotate-local)
   )
  )


(defmethod relocate ((this cara) (arg0 int))
  (if (nonzero? (-> this steering-wheel-l))
      (&+! (-> this steering-wheel-l) arg0)
      )
  (if (nonzero? (-> this steering-wheel-r))
      (&+! (-> this steering-wheel-r) arg0)
      )
  (if (nonzero? (-> this fin-fl))
      (&+! (-> this fin-fl) arg0)
      )
  (if (nonzero? (-> this fin-fr))
      (&+! (-> this fin-fr) arg0)
      )
  (if (nonzero? (-> this fin-rl))
      (&+! (-> this fin-rl) arg0)
      )
  (if (nonzero? (-> this fin-rr))
      (&+! (-> this fin-rr) arg0)
      )
  (if (nonzero? (-> this rudder))
      (&+! (-> this rudder) arg0)
      )
  (if (nonzero? (-> this rudder-l))
      (&+! (-> this rudder-l) arg0)
      )
  (if (nonzero? (-> this rudder-r))
      (&+! (-> this rudder-r) arg0)
      )
  (call-parent-method this arg0)
  )

(defmethod allocate-and-init-cshape ((this cara))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 7) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 8))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 18432.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 3686.4 0.0 12288.0 4096.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) -3686.4 0.0 12288.0 4096.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 5))))
      (set! (-> v1-15 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 0.0 819.2 5734.4 4915.2)
      (set! (-> v1-15 nav-radius) 14336.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 80))))
      (set! (-> v1-17 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 2048.0 -4096.0 5734.4)
      (set! (-> v1-17 nav-radius) 14336.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 4915.2 0.0 -11468.8 4096.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> v1-21 prim-core action) (collide-action solid))
      (set! (-> v1-21 transform-index) 0)
      (set-vector! (-> v1-21 local-sphere) -4915.2 0.0 -11468.8 4096.0)
      )
    (let ((v1-23 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-23 prim-core action) (collide-action solid rideable))
      (set! (-> v1-23 transform-index) 3)
      (set-vector! (-> v1-23 local-sphere) 0.0 0.0 0.0 18432.0)
      )
    (set! (-> s5-0 nav-radius) 20480.0)
    (let ((v1-25 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-25 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-25 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod update-joint-mods ((this cara))
  (let ((f30-0 (* 3640.889 (-> this controls steering)))
        (f26-0 (* 9102.223 (-> this controls steering)))
        (f28-0 (* -3640.889 (-> this controls lean-z)))
        (s5-0 (new 'static 'vector :x 1.0 :w 1.0))
        )
    (quaternion-vector-angle! (-> this steering-wheel-l rotation) s5-0 f26-0)
    (quaternion-vector-angle! (-> this steering-wheel-r rotation) s5-0 f26-0)
    (quaternion-vector-angle! (-> this fin-fl rotation) s5-0 (- f28-0))
    (quaternion-vector-angle! (-> this fin-fr rotation) s5-0 f28-0)
    (quaternion-vector-angle! (-> this fin-rl rotation) s5-0 f28-0)
    (quaternion-vector-angle! (-> this fin-rr rotation) s5-0 (- f28-0))
    (quaternion-vector-angle! (-> this rudder rotation) s5-0 f30-0)
    )
  0
  (none)
  )

(defmethod init-skel-and-rigid-body ((this cara))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-cara" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (alloc-and-init-rigid-body-control this *cara-constants*)
  (set! (-> this rider-hand-joint-array 0) 11)
  (set! (-> this rider-hand-joint-array 1) 12)
  (set! (-> this steering-wheel-l) (new 'process 'joint-mod-rotate-local this 11 #t))
  (set! (-> this steering-wheel-r) (new 'process 'joint-mod-rotate-local this 12 #t))
  (set! (-> this fin-fl) (new 'process 'joint-mod-rotate-local this 4 #t))
  (set! (-> this fin-fr) (new 'process 'joint-mod-rotate-local this 5 #t))
  (set! (-> this fin-rl) (new 'process 'joint-mod-rotate-local this 6 #t))
  (set! (-> this fin-rr) (new 'process 'joint-mod-rotate-local this 8 #t))
  (set! (-> this rudder) (new 'process 'joint-mod-rotate-local this 10 #t))
  (set! (-> this rudder-l) (new 'process 'joint-mod-rotate-local this 7 #t))
  (set! (-> this rudder-r) (new 'process 'joint-mod-rotate-local this 9 #t))
  0
  (none)
  )

(deftype carb (car-base)
  ((steering-wheel-l  joint-mod-rotate-local)
   (steering-wheel-r  joint-mod-rotate-local)
   (fin-fl            joint-mod-rotate-local)
   (fin-fr            joint-mod-rotate-local)
   (fin-rl            joint-mod-rotate-local)
   (fin-rr            joint-mod-rotate-local)
   (gravity-dir             vector                    :inline) ;; custom level
   (path-pos                vector                    :inline) ;; custom level
   (path-dir                vector                    :inline) ;; custom level
    (tunnel-dir              vector                    :inline) ;; custom level
   (prev-tunnel-dir         vector                    :inline) ;; custom level
   (sum-ground-normal       vector                    :inline) ;; custom level
   (normal-dir              vector                    :inline) ;; custom level
   (impact-normal           vector                    :inline) ;; custom level
   (side-dir                vector                    :inline) ;; custom level
   (ground-pos-array        vector                    4 :inline) ;; custom level
   (in-tunnel               symbol                    :offset 756) ;; custom level
   )
  )


(defmethod relocate ((this carb) (arg0 int))
  (if (nonzero? (-> this steering-wheel-l))
      (&+! (-> this steering-wheel-l) arg0)
      )
  (if (nonzero? (-> this steering-wheel-r))
      (&+! (-> this steering-wheel-r) arg0)
      )
  (if (nonzero? (-> this fin-fl))
      (&+! (-> this fin-fl) arg0)
      )
  (if (nonzero? (-> this fin-fr))
      (&+! (-> this fin-fr) arg0)
      )
  (if (nonzero? (-> this fin-rl))
      (&+! (-> this fin-rl) arg0)
      )
  (if (nonzero? (-> this fin-rr))
      (&+! (-> this fin-rr) arg0)
      )
  (call-parent-method this arg0)
  )

(defmethod allocate-and-init-cshape ((this carb))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 7) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 8))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 18432.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 3686.4 409.6 13107.2 3686.4)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) -3686.4 409.6 13107.2 3686.4)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 0.0 819.2 6553.6 4096.0)
      (set! (-> v1-15 nav-radius) 14336.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 64))))
      (set! (-> v1-17 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 2457.6 -2457.6 5734.4)
      (set! (-> v1-17 nav-radius) 14336.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 4505.6 409.6 -11059.2 3686.4)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> v1-21 prim-core action) (collide-action solid))
      (set! (-> v1-21 transform-index) 0)
      (set-vector! (-> v1-21 local-sphere) -4505.6 409.6 -11059.2 3686.4)
      )
    (let ((v1-23 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-23 prim-core action) (collide-action solid rideable))
      (set! (-> v1-23 transform-index) 3)
      (set-vector! (-> v1-23 local-sphere) 0.0 0.0 0.0 18432.0)
      )
    (set! (-> s5-0 nav-radius) 20480.0)
    (let ((v1-25 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-25 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-25 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod update-joint-mods ((this carb))
  (let ((f30-0 (* -5461.3335 (-> this controls lean-z)))
        (f28-0 (* 9102.223 (-> this controls steering)))
        (gp-0 (new 'static 'vector :x 1.0 :w 1.0))
        )
    (quaternion-vector-angle! (-> this steering-wheel-l rotation) gp-0 f28-0)
    (quaternion-vector-angle! (-> this steering-wheel-r rotation) gp-0 f28-0)
    (quaternion-vector-angle! (-> this fin-fl rotation) gp-0 (+ (* -0.8 f30-0) (* 0.4 f28-0)))
    (quaternion-vector-angle! (-> this fin-fr rotation) gp-0 (+ (* 0.8 f30-0) (* 0.4 f28-0)))
    (quaternion-vector-angle! (-> this fin-rl rotation) gp-0 (+ (* 0.8 f30-0) (* 0.4 f28-0)))
    (quaternion-vector-angle! (-> this fin-rr rotation) gp-0 (+ (* -0.8 f30-0) (* 0.4 f28-0)))
    )
  0
  (none)
  )

(defmethod init-skel-and-rigid-body ((this carb))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-carb" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (alloc-and-init-rigid-body-control this *carb-constants*)
  (set! (-> this rider-hand-joint-array 0) 8)
  (set! (-> this rider-hand-joint-array 1) 9)
  (set! (-> this steering-wheel-l) (new 'process 'joint-mod-rotate-local this 8 #t))
  (set! (-> this steering-wheel-r) (new 'process 'joint-mod-rotate-local this 9 #t))
  (set! (-> this fin-fl) (new 'process 'joint-mod-rotate-local this 4 #t))
  (set! (-> this fin-fr) (new 'process 'joint-mod-rotate-local this 6 #t))
  (set! (-> this fin-rl) (new 'process 'joint-mod-rotate-local this 5 #t))
  (set! (-> this fin-rr) (new 'process 'joint-mod-rotate-local this 7 #t))
  (set! (-> this in-tunnel) #f) ;; custom level
  0
  (none)
  )

(deftype carc (car-base)
  ((steering-wheel  joint-mod-rotate-local)
   (fin-fl          joint-mod-rotate-local)
   (fin-fr          joint-mod-rotate-local)
   (fin-rl          joint-mod-rotate-local)
   (fin-rr          joint-mod-rotate-local)
   (fin2-rl         joint-mod-rotate-local)
   (fin2-rr         joint-mod-rotate-local)
   )
  )


(defmethod relocate ((this carc) (arg0 int))
  (if (nonzero? (-> this steering-wheel))
      (&+! (-> this steering-wheel) arg0)
      )
  (if (nonzero? (-> this fin-fl))
      (&+! (-> this fin-fl) arg0)
      )
  (if (nonzero? (-> this fin-fr))
      (&+! (-> this fin-fr) arg0)
      )
  (if (nonzero? (-> this fin-rl))
      (&+! (-> this fin-rl) arg0)
      )
  (if (nonzero? (-> this fin-rr))
      (&+! (-> this fin-rr) arg0)
      )
  (if (nonzero? (-> this fin2-rl))
      (&+! (-> this fin2-rl) arg0)
      )
  (if (nonzero? (-> this fin2-rr))
      (&+! (-> this fin2-rr) arg0)
      )
  (call-parent-method this arg0)
  )

(defmethod allocate-and-init-cshape ((this carc))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 6) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 7))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 21299.2)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 3686.4 -819.2 6963.2 3276.8)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) -3686.4 -819.2 6963.2 3276.8)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 64))))
      (set! (-> v1-15 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 0.0 2457.6 0.0 6144.0)
      (set! (-> v1-15 nav-radius) 12288.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 10))))
      (set! (-> v1-17 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 2048.0 -10240.0 4915.2)
      (set! (-> v1-17 nav-radius) 10240.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 10))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 0.0 2048.0 -16384.0 4096.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-21 prim-core action) (collide-action solid rideable))
      (set! (-> v1-21 transform-index) 3)
      (set-vector! (-> v1-21 local-sphere) 0.0 0.0 0.0 21299.2)
      )
    (set! (-> s5-0 nav-radius) 16384.0)
    (let ((v1-23 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-23 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-23 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod update-joint-mods ((this carc))
  (let ((f30-0 (* -5461.3335 (-> this controls steering)))
        (f28-0 (* -5461.3335 (-> this controls lean-z)))
        (f0-3 (* 9102.223 (-> this controls steering)))
        (s5-0 (new 'static 'vector :x 1.0 :w 1.0))
        )
    (quaternion-vector-angle! (-> this steering-wheel rotation) s5-0 f0-3)
    (quaternion-vector-angle! (-> this fin-fl rotation) s5-0 (- f28-0))
    (quaternion-vector-angle! (-> this fin-fr rotation) s5-0 f28-0)
    (quaternion-vector-angle! (-> this fin-rl rotation) s5-0 (+ (* 0.8 f28-0) (* -0.2 f30-0)))
    (quaternion-vector-angle! (-> this fin-rr rotation) s5-0 (+ (* -0.8 f28-0) (* -0.2 f30-0)))
    (quaternion-vector-angle! (-> this fin2-rl rotation) s5-0 (+ (* 0.2 f28-0) (* -0.8 f30-0)))
    (quaternion-vector-angle! (-> this fin2-rr rotation) s5-0 (+ (* -0.2 f28-0) (* -0.8 f30-0)))
    )
  0
  (none)
  )

(defmethod init-skel-and-rigid-body ((this carc))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-carc" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (alloc-and-init-rigid-body-control this *carc-constants*)
  (set! (-> this rider-hand-joint-array 0) 10)
  (set! (-> this steering-wheel) (new 'process 'joint-mod-rotate-local this 10 #t))
  (set! (-> this fin-fl) (new 'process 'joint-mod-rotate-local this 4 #t))
  (set! (-> this fin-fr) (new 'process 'joint-mod-rotate-local this 5 #t))
  (set! (-> this fin-rl) (new 'process 'joint-mod-rotate-local this 8 #t))
  (set! (-> this fin-rr) (new 'process 'joint-mod-rotate-local this 9 #t))
  (set! (-> this fin2-rl) (new 'process 'joint-mod-rotate-local this 6 #t))
  (set! (-> this fin2-rr) (new 'process 'joint-mod-rotate-local this 7 #t))
  0
  (none)
  )

(define *hellcat-front-turret-control-info* (new 'static 'turret-control-info
                                              :joint-index 4
                                              :barrel-count 1
                                              :shot-speed 819200.0
                                              :attack-range 286720.0
                                              :rot-min (new 'static 'array float 2 -16384.0 -21845.334)
                                              :rot-max (new 'static 'array float 2 0.0 21845.334)
                                              :local-pos (new 'static 'vector :y -1433.6 :z 4096.0 :w 1.0)
                                              :local-dir (new 'static 'vector :z 1.0 :w 1.0)
                                              :barrel-array (new 'static 'inline-array turret-barrel-info 4
                                                (new 'static 'turret-barrel-info
                                                  :local-pos (new 'static 'vector :y -1433.6 :z 4096.0 :w 1.0)
                                                  :local-dir (new 'static 'vector :z 1.0 :w 1.0)
                                                  )
                                                (new 'static 'turret-barrel-info)
                                                (new 'static 'turret-barrel-info)
                                                (new 'static 'turret-barrel-info)
                                                )
                                              )
        )

(deftype hellcat (vehicle-guard)
  ((turret-jm  joint-mod-rotate-local)
   )
  )


(defmethod relocate ((this hellcat) (arg0 int))
  (if (nonzero? (-> this turret-jm))
      (&+! (-> this turret-jm) arg0)
      )
  (call-parent-method this arg0)
  )

(defmethod allocate-and-init-cshape ((this hellcat))
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum usually-hit-by-player))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing)
          )
    (set! (-> s5-0 penetrate-using) (penetrate vehicle))
    (let ((s4-0 (new 'process 'collide-shape-prim-group s5-0 (the-as uint 7) 0)))
      (set! (-> s5-0 total-prims) (the-as uint 8))
      (set! (-> s4-0 prim-core action) (collide-action solid rideable))
      (set-vector! (-> s4-0 local-sphere) 0.0 0.0 0.0 26624.0)
      (set! (-> s5-0 root-prim) s4-0)
      )
    (let ((v1-11 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 1))))
      (set! (-> v1-11 prim-core action) (collide-action solid))
      (set! (-> v1-11 transform-index) 0)
      (set-vector! (-> v1-11 local-sphere) 4096.0 1228.8 9011.2 6144.0)
      )
    (let ((v1-13 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 4))))
      (set! (-> v1-13 prim-core action) (collide-action solid))
      (set! (-> v1-13 transform-index) 0)
      (set-vector! (-> v1-13 local-sphere) -4096.0 1228.8 9011.2 6144.0)
      )
    (let ((v1-15 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-15 prim-core action) (collide-action solid nav-sphere))
      (set! (-> v1-15 transform-index) 0)
      (set-vector! (-> v1-15 local-sphere) 0.0 2048.0 -409.6 6144.0)
      (set! (-> v1-15 nav-radius) 24576.0)
      )
    (let ((v1-17 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 10))))
      (set! (-> v1-17 prim-core action) (collide-action solid))
      (set! (-> v1-17 transform-index) 0)
      (set-vector! (-> v1-17 local-sphere) 0.0 4096.0 -10240.0 8192.0)
      )
    (let ((v1-19 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 2))))
      (set! (-> v1-19 prim-core action) (collide-action solid))
      (set! (-> v1-19 transform-index) 0)
      (set-vector! (-> v1-19 local-sphere) 10240.0 2048.0 -8192.0 6144.0)
      )
    (let ((v1-21 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 8))))
      (set! (-> v1-21 prim-core action) (collide-action solid))
      (set! (-> v1-21 transform-index) 0)
      (set-vector! (-> v1-21 local-sphere) -10240.0 2048.0 -8192.0 6144.0)
      )
    (let ((v1-23 (new 'process 'collide-shape-prim-mesh s5-0 (the-as uint 0) (the-as uint 0))))
      (set! (-> v1-23 prim-core action) (collide-action solid rideable))
      (set! (-> v1-23 transform-index) 3)
      (set-vector! (-> v1-23 local-sphere) 0.0 0.0 0.0 26624.0)
      )
    (set! (-> s5-0 nav-radius) 20480.0)
    (let ((v1-25 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-25 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-25 prim-core collide-with))
      )
    (set! (-> s5-0 nav-flags) (nav-flags has-child-spheres))
    (set! (-> this root) s5-0)
    )
  0
  (none)
  )

(defmethod update-joint-mods ((this hellcat))
  (update-joint-mod (-> this turret) (-> this turret-jm))
  0
  (none)
  )

(defmethod init-skel-and-rigid-body ((this hellcat))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-hellcat" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (alloc-and-init-rigid-body-control this *hellcat-constants*)
  (set-info (-> this turret) *hellcat-front-turret-control-info*)
  (set! (-> this turret-jm) (new 'process 'joint-mod-rotate-local this (-> this turret info joint-index) #t))
  0
  (none)
  )

;; Custom Level Methods 

(defmethod init-from-entity! ((this pre-car) (arg0 entity-actor))
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (vector+! (-> this root trans) (-> this root trans) (new 'static 'vector :w 1.0))
  (quaternion-rotate-y! (-> this root quat) (-> this root quat) 32768.0)
  (let ((s4-0 (new 'stack 'traffic-object-spawn-params)))
    (set! (-> s4-0 object-type) (traffic-type crimson-guard-0))
    (set! (-> s4-0 behavior) (the-as uint 0))
    (set! (-> s4-0 id) (the-as uint 0))
    (set! (-> s4-0 nav-mesh) #f)
    (set! (-> s4-0 nav-branch) #f)
    (set! (-> s4-0 proc) #f)
    (set! (-> s4-0 handle) (the-as handle #f))
    (set! (-> s4-0 user-data) (the-as uint 0))
    (set! (-> s4-0 flags) (traffic-spawn-flags trsflags-05))
    (set! (-> s4-0 guard-type) (the-as uint 11))
    (set! (-> s4-0 entity) arg0)
    (vector-reset! (-> s4-0 velocity))
    (set! (-> s4-0 position quad) (-> this root trans quad))
    (quaternion-copy! (-> s4-0 rotation) (-> this root quat))
    (vehicle-spawn *traffic-manager* carb s4-0)
    
  )
  (cleanup-for-death this)
  )

(defmethod vehicle-method-362 ((this carb) (arg0 traffic-object-spawn-params))
  (set! (-> this entity) (the-as entity-actor (-> arg0 entity)))
  (if (not (-> this entity))
      (set! (-> this entity) (entity-by-type pre-car))
      )
  ;; (set! (-> this flags)
  ;;       (the-as rigid-body-object-flag (logior (rigid-body-object-flag ignore-damage ignore-impulse) (-> this flags)))
  ;;       )
  (when (-> this entity)
    (set! (-> this path) (new 'process 'curve-control this 'path -1000000000.0))
    (if (nonzero? (-> this path))
        (logior! (-> this path flags) (path-control-flag display draw-line draw-point draw-text))
        )
    )
  (call-parent-method this arg0)
  0
  (none)
  )

(defmethod vehicle-method-360 ((this carb) (arg0 float) (arg1 vehicle-physics-work))
  (local-vars (v1-59 float) (v1-63 float))
  (rlet ((acc :class vf)
         (vf0 :class vf)
         (vf1 :class vf)
         (vf2 :class vf)
         )
    (init-vf0-vector)
    (let ((s3-0 (-> this rbody)))
      (mem-copy! (the-as pointer (-> (the-as vehicle-physics-work arg1) mat)) (the-as pointer (-> s3-0 matrix)) 64)
      (logior! (-> this flags) (rigid-body-object-flag in-air))
      (logclear! (-> this flags) (rigid-body-object-flag on-ground on-flight-level))
      (vector-reset! (-> this sum-ground-normal))
      (let ((f30-0 (-> this info ground-probe-distance))
            (s2-0 (new 'stack-no-clear 'collide-query))
            )
        (set! (-> (the-as vehicle-physics-work arg1) speed-factor)
              (fmax 0.0 (fmin 0.9 (* 0.000008138021 (+ -40960.0 (vector-length (-> s3-0 lin-velocity))))))
              )
        (vector-float*!
          (-> (the-as vehicle-physics-work arg1) lift-dir)
          (-> (the-as vehicle-physics-work arg1) mat uvec)
          -1.0
          )
        (vector-float*! (-> s2-0 move-dist) (-> (the-as vehicle-physics-work arg1) lift-dir) (the-as float f30-0))
        (let ((v1-15 s2-0))
          (set! (-> v1-15 radius) 409.6)
          (set! (-> v1-15 collide-with) (collide-spec
                                          backgnd
                                          bot
                                          obstacle
                                          hit-by-player-list
                                          hit-by-others-list
                                          player-list
                                          water
                                          collectable
                                          blocking-plane
                                          pusher
                                          vehicle-mesh-probeable
                                        
                                          )
                )
          (set! (-> v1-15 ignore-process0) #f)
          (set! (-> v1-15 ignore-process1) #f)
          (set! (-> v1-15 ignore-pat) (new 'static 'pat-surface :noentity #x1 :nopilot #x1))
          (set! (-> v1-15 action-mask) (collide-action solid))
          )
        (dotimes (s1-0 (-> this info lift-thruster-count))
          (let ((v1-18 (-> this info lift-thruster-array s1-0))
                (s0-0 (-> (the-as vehicle-physics-work arg1) probe-work-array s1-0))
                )
            (set! (-> s0-0 local-pos quad) (-> v1-18 local-pos quad))
            (set! (-> s0-0 local-normal quad) (-> v1-18 normal quad))
            (vector-matrix*! (-> s0-0 world-pos) (-> s0-0 local-pos) (-> (the-as vehicle-physics-work arg1) mat))
            (set! (-> s0-0 probe-pos quad) (-> s0-0 world-pos quad))
            (rigid-body-control-method-360 s3-0 (-> s0-0 probe-pos) (-> s0-0 velocity))
            (vector-reset! (-> s0-0 ground-normal))
            (vector-reset! (-> s0-0 u-dir))
            (when (logtest? (-> this flags) (rigid-body-object-flag enable-collision))
              (set! (-> s2-0 start-pos quad) (-> s0-0 probe-pos quad))
              (set! (-> s0-0 probe-uu) (probe-using-line-sphere *collide-cache* s2-0))
              (cond
                ((and (>= (-> s0-0 probe-uu) 0.0) (!= (-> s2-0 best-other-tri pat mode) 1))
                 (logclear! (-> this flags) (rigid-body-object-flag in-air))
                 (logior! (-> this flags) (rigid-body-object-flag on-ground))
                 (set! (-> s0-0 ground-normal quad) (-> s2-0 best-other-tri normal quad))
                 (vector+! (-> this sum-ground-normal) (-> this sum-ground-normal) (-> s0-0 ground-normal))
                 (car-find-mesh-dir (-> s0-0 u-dir) (-> this path-dir) (-> s2-0 best-other-tri))
                 )
                (else
                  (set! (-> s0-0 probe-uu) 1.0)
                  )
                )
              (vector+float*!
                (-> s0-0 ground-pos)
                (-> s0-0 probe-pos)
                (-> (the-as vehicle-physics-work arg1) lift-dir)
                (the-as float f30-0)
                )
              0
              )
            )
          )
        )
      (set! (-> this prev-tunnel-dir quad) (-> this tunnel-dir quad))
      (vector-reset! (-> this tunnel-dir))
      (dotimes (v1-55 (-> this info lift-thruster-count))
        (let ((a2-5 (-> (the-as vehicle-physics-work arg1) probe-work-array v1-55)))
          (vector+! (-> this tunnel-dir) (-> this tunnel-dir) (-> a2-5 u-dir))
          )
        )
      (let ((f0-9 0.0))
        (.lvf vf1 (&-> (-> this tunnel-dir) quad))
        (.add.w.vf vf2 vf0 vf0 :mask #b1)
        (.mul.vf vf1 vf1 vf1)
        (.mul.x.vf acc vf2 vf1 :mask #b1)
        (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
        (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
        (.mov v1-59 vf1)
        (if (< f0-9 v1-59)
            (vector-normalize! (-> this tunnel-dir) 1.0)
            (set! (-> this tunnel-dir quad) (-> this path-dir quad))
            )
        )
      (let ((f0-10 0.0))
        (.lvf vf1 (&-> (-> this sum-ground-normal) quad))
        (.add.w.vf vf2 vf0 vf0 :mask #b1)
        (.mul.vf vf1 vf1 vf1)
        (.mul.x.vf acc vf2 vf1 :mask #b1)
        (.add.mul.y.vf acc vf2 vf1 acc :mask #b1)
        (.add.mul.z.vf vf1 vf2 vf1 acc :mask #b1)
        (.mov v1-63 vf1)
        (when (< f0-10 v1-63)
          (set! (-> this normal-dir quad) (-> this sum-ground-normal quad))
          (vector-normalize! (-> this normal-dir) 1.0)
          (vector-float*! (-> this gravity-dir) (-> this normal-dir) -1.0)
          (vector-cross! (-> this side-dir) (-> this normal-dir) (-> this tunnel-dir))
          (vector-normalize! (-> this side-dir) 1.0)
          )
        )
      (when (logtest? (-> this flags) (rigid-body-object-flag on-ground))
        (let ((s2-1 (new 'stack-no-clear 'inline-array 'vector 1)))
          (matrix-from-two-vectors! (the-as matrix (-> s2-1 0)) (-> this prev-tunnel-dir) (-> this tunnel-dir))
          (vector-rotate*! (-> s3-0 lin-momentum) (-> s3-0 lin-momentum) (the-as matrix (-> s2-1 0)))
          )
        ;(init-velocities! (-> this rbody))
        )
      (dotimes (s2-2 (-> this info lift-thruster-count))
        (let ((v1-78 (-> (the-as vehicle-physics-work arg1) probe-work-array s2-2)))
          (set! (-> (the-as vehicle-physics-work arg1) world-pos quad) (-> v1-78 world-pos quad))
          (set! (-> (the-as vehicle-physics-work arg1) velocity quad) (-> v1-78 velocity quad))
          (let ((s1-1 (new 'stack-no-clear 'vector)))
            (when (< (-> v1-78 probe-uu) 1.0)
              (set! (-> s1-1 x) (- 0.5 (-> v1-78 probe-uu)))
              (let ((a0-54 (-> (the-as vehicle-physics-work arg1) force))
                    (a1-26 (-> v1-78 ground-normal))
                    (f0-15 0.5)
                    (f1-7 arg0)
                    )
                (vector-float*!
                  a0-54
                  a1-26
                  (* f0-15
                     (/ 1.0 f1-7)
                     (-> this info inv-lift-thruster-count)
                     (-> this info info mass)
                     (- (vector-dot (-> (the-as vehicle-physics-work arg1) velocity) (-> v1-78 ground-normal)))
                     )
                  )
                )
              ;; (apply-impact!
              ;;   s3-0
              ;;   (-> (the-as vehicle-physics-work arg1) world-pos)
              ;;   (-> (the-as vehicle-physics-work arg1) force)
              ;;   )
              (let ((f0-25
                      (* 16.0
                         (-> this info info mass)
                         (-> this info extra gravity)
                         (-> this info inv-lift-thruster-count)
                         (-> s1-1 x)
                         (-> this info spring-lift-factor)
                         )
                      )
                    )
                (vector-float*!
                  (-> (the-as vehicle-physics-work arg1) force)
                  (-> (the-as vehicle-physics-work arg1) lift-dir)
                  (* -1.0 f0-25)
                  )
                )
              ;; (apply-impact!
              ;;   s3-0
              ;;   (-> (the-as vehicle-physics-work arg1) world-pos)
              ;;   (-> (the-as vehicle-physics-work arg1) force)
              ;;   )
              )
            )
          )
        0
        )
      )
    0
    (none)
    )
  )

;;; Begin apply gravity for carb
  (defmethod apply-gravity! ((this carb) (arg0 float))
  (let ((s4-0 (new 'stack-no-clear 'vehicle-physics-work))
        (s3-0 (-> this rbody))
        )
    (let ((s2-0 (-> this info)))
      (mem-copy! (the-as pointer (-> s4-0 mat)) (the-as pointer (-> s3-0 matrix)) 64)
      (when (nonzero? (-> this path))
        (let ((s1-0 (new 'stack-no-clear 'matrix)))
          (set! (-> s1-0 fvec x) (path-control-method-25 (-> this path) (-> s3-0 position)))
          (displacement-between-two-points-normalized! (-> this path) (-> s1-0 rvec) (-> s1-0 fvec x))
          (get-point-in-path! (-> this path) (-> s1-0 uvec) (-> s1-0 fvec x) 'interp)
          (set! (-> this path-pos quad) (-> s1-0 uvec quad))
          (vector-float*! (-> this path-dir) (-> s1-0 rvec) -1.0)
          )
        0
        )
      (dotimes (v1-12 4)
        (vector-reset! (-> this ground-pos-array v1-12))
        )
      (when (not (logtest? (-> this flags) (rigid-body-object-flag dead)))
        (vehicle-method-360 this arg0 (the-as vehicle-physics-work s4-0))
        (dotimes (v1-20 4)
          (let ((a0-15 (-> s4-0 probe-work-array v1-20)))
            (if (< (-> a0-15 probe-uu) 1.0)
                (set! (-> this ground-pos-array v1-20 quad) (-> a0-15 ground-pos quad))
                )
            )
          )
        (let ((s1-1 (new 'stack-no-clear 'matrix)))
          (set! (-> s1-1 fvec quad) (-> s3-0 matrix fvec quad))
          (set! (-> s1-1 uvec quad) (-> s3-0 matrix uvec quad))
          (set! (-> s1-1 trans quad) (-> s3-0 matrix rvec quad))
          (vector-! (-> s1-1 rvec) (-> this tunnel-dir) (-> s1-1 fvec))
          (vector+float*! (-> s1-1 rvec) (-> s1-1 rvec) (-> s1-1 uvec) (- (vector-dot (-> s1-1 rvec) (-> s1-1 uvec))))
          (vector+float*! (-> s4-0 world-pos) (-> s3-0 position) (-> s1-1 fvec) 4096.0)
          (vector-float*!
            (-> s4-0 force)
            (-> s1-1 trans)
            (+ (* 8192000.0 (vector-dot (-> s1-1 trans) (-> s1-1 rvec)))
               (* -1638400.0 (vector-dot (-> s1-1 uvec) (-> s3-0 ang-velocity)))
               )
            )
          (rigid-body-control-method-361 s3-0 (-> s4-0 world-pos) (-> s4-0 force))
          (add-debug-vector #t (bucket-id debug-no-zbuf1) (-> s4-0 world-pos) (-> s1-1 rvec) (meters 1) *color-red*)
          )
        (when (logtest? (-> this flags) (rigid-body-object-flag on-ground))
          (let ((v1-39 (new 'stack-no-clear 'matrix)))
            (set! (-> v1-39 rvec quad) (-> s3-0 matrix rvec quad))
            (set! (-> v1-39 rvec quad) (-> this side-dir quad))
            (set! (-> v1-39 uvec w) (vector-dot (-> v1-39 rvec) (-> s3-0 lin-velocity)))
            (set! (-> v1-39 uvec z) (* (fabs (-> v1-39 uvec w)) (-> s2-0 info mass) (/ 1.0 arg0)))
            (set! (-> v1-39 uvec y)
                  (fmax (fmin (* -4.0 (-> s2-0 info mass) (-> v1-39 uvec w)) (-> v1-39 uvec z)) (- (-> v1-39 uvec z)))
                  )
            (set! (-> v1-39 uvec x) (* 4.8 (-> s2-0 extra gravity) (-> s2-0 info mass) (-> this controls steering)))
            (vector-float*! (-> s4-0 force) (-> v1-39 rvec) (+ (-> v1-39 uvec x) (-> v1-39 uvec y)))
            (print "applied gravity")
            )
          (add-force! s3-0 (-> s4-0 force))
          )
        (when (or (and (logtest? (-> this flags) (rigid-body-object-flag in-air))
                       ;;(logtest? (-> this flags) (rigid-body-object-flag impact))
                       (not (logtest? (-> this flags) (rigid-body-object-flag dead)))
                       (< (vector-dot (-> s3-0 matrix uvec) (-> this impact-normal)) 0.0)
                       )
                  ;; (logtest? (rigid-body-object-flag overturned) (-> this flags))
                  )
          (vector-reset! (-> s4-0 local-pos))
          (set! (-> s4-0 local-pos y) -6144.0)
          ;; (when (logtest? (rigid-body-object-flag overturned) (-> this flags))
          ;;   (let ((f0-33 (* 0.0033333334 (the float (- (current-time) (-> this overturned-time))))))
          ;;     (set! (-> s4-0 local-pos y) (* (+ -32768.0 (* -16384.0 f0-33)) (fmax 0.1 (- (-> s3-0 matrix uvec y)))))
          ;;     )
          ;;   )
          (vector-matrix*! (-> s4-0 world-pos) (-> s4-0 local-pos) (-> s4-0 mat))
          (vector-float*! (-> s4-0 force) (-> this impact-normal) (* -0.5 (-> s2-0 extra gravity) (-> s2-0 info mass)))
          (rigid-body-control-method-361 s3-0 (-> s4-0 world-pos) (-> s4-0 force))
          )
        (when (logtest? (-> this flags) (rigid-body-object-flag on-ground))
          (when (logtest? (rigid-body-object-flag ignition) (-> this flags))
            (vector-matrix*! (-> s4-0 world-pos) (-> s2-0 engine-thrust-local-pos) (-> s4-0 mat))
            (set! (-> s4-0 dir quad) (-> s4-0 mat fvec quad))
            (let ((f0-42 (* (-> this engine-thrust) (-> s2-0 max-engine-thrust) (-> s2-0 info mass))))
              (vector-float*! (-> s4-0 force) (-> s4-0 dir) f0-42)
              )
            ;;(apply-impact! s3-0 (-> s4-0 world-pos) (-> s4-0 force))
            )
          (when (not (logtest? (rigid-body-object-flag player-driving) (-> this flags)))
            (vector-matrix*! (-> s4-0 world-pos) (-> s2-0 brake-local-pos) (-> s4-0 mat))
            (rigid-body-control-method-360 s3-0 (-> s4-0 world-pos) (-> s4-0 velocity))
            (let* ((f3-0 (vector-length (-> s4-0 velocity)))
                   (f0-43 (-> s2-0 info mass))
                   (f1-28 (/ 0.5 arg0))
                   (f2-7 98304.0)
                   (f3-1 (fmax 16384.0 f3-0))
                   (f0-44 (* f0-43 (fmin f1-28 (* f2-7 (/ 1.0 f3-1) (-> s2-0 brake-factor)))))
                   )
              (vector-float*! (-> s4-0 force) (-> s4-0 velocity) (- f0-44))
              )
            ;;(apply-impact! s3-0 (-> s4-0 world-pos) (-> s4-0 force))
            )
          (set! (-> s4-0 dir quad) (-> this tunnel-dir quad))
          (let ((f0-47 (vector-dot (-> s4-0 dir) (-> s3-0 lin-velocity))))
            (vector-float*!
              (-> s4-0 force)
              (-> s4-0 dir)
              (* -0.000012207031 (fabs f0-47) f0-47 (-> s2-0 drag-force-factor))
              )
            )
          (add-force! s3-0 (-> s4-0 force))
          )
        (set! (-> s4-0 local-pos quad) (-> (new 'static 'vector :z -16384.0 :w 1.0) quad))
        (vector-matrix*! (-> s4-0 world-pos) (-> s4-0 local-pos) (-> s4-0 mat))
        (rigid-body-control-method-360 s3-0 (-> s4-0 world-pos) (-> s4-0 velocity))
        (vector-reset! (-> s4-0 force))
        (set! (-> s4-0 dir quad) (-> s4-0 mat uvec quad))
        (vector+float*!
          (-> s4-0 force)
          (-> s4-0 force)
          (-> s4-0 dir)
          (* -1.0 (vector-dot (-> s4-0 dir) (-> s4-0 velocity)))
          )
        (set! (-> s4-0 dir quad) (-> s4-0 mat rvec quad))
        (vector+float*!
          (-> s4-0 force)
          (-> s4-0 force)
          (-> s4-0 dir)
          (* -1.0 (vector-dot (-> s4-0 dir) (-> s4-0 velocity)))
          )
        (rigid-body-control-method-361 s3-0 (-> s4-0 world-pos) (-> s4-0 force))
        )
      (vector-float*! (-> s4-0 force) (-> this gravity-dir) (* (-> s2-0 info mass) (-> s2-0 extra gravity)))
      )
    (add-force! s3-0 (-> s4-0 force))
    )
  (rigid-body-object-method-53 this arg0)
  0
  (none)
  )
(defmethod vehicle-method-92 ((this carb) (arg0 vehicle-controls))
  (seek! (-> this controls steering) (-> arg0 steering) (* 8.0 (seconds-per-frame)))
  (seek! (-> this controls lean-z) (-> arg0 lean-z) (* 8.0 (seconds-per-frame)))
  (let ((f0-10 (-> arg0 throttle))
        (f30-0 (-> arg0 brake))
        )
    (seek! (-> this controls throttle) f0-10 (* 4.0 (seconds-per-frame)))
    (set! (-> this controls brake) f30-0)
    )
  ;; (set! (-> this controls prev-flags) (-> this controls flags))
  ;; (set! (-> this controls flags) (-> arg0 flags))
  0
  (none)
  )
  